import {todolistsAPI, TodolistType} from '../../api/todolists-api'import {    appAction, RequestStatusType,} from "../../app/app-reduce";import {ErrorType} from "./tasks-reducer";import axios from "axios";import {createSlice, PayloadAction} from "@reduxjs/toolkit";import {createAppAsyncThunk, handleServerAppError, handleServerNetworkError} from "../../common/utils";import {RESULT_CODE} from "../../common/enums";import {thunkTryCatch} from "common/utils/thunkTryCatch";const slice = createSlice({    name: 'todolist',    initialState: [] as TodolistDomainType[],    reducers: {        addTodolist: (state, action: PayloadAction<{            todolist: TodolistType        }>) => {            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})        },        changeTodolistFilter: (state, action: PayloadAction<{            id: string,            filter: FilterValuesType        }>) => {            const index = state.findIndex(el => el.id == action.payload.id)            if (index !== -1) state[index].filter = action.payload.filter        },        setEntityStatus: (state, action: PayloadAction<{            id: string,            entityStatus: RequestStatusType        }>) => {            const index = state.findIndex(el => el.id == action.payload.id)            if (index !== -1) state[index].entityStatus = action.payload.entityStatus        },        // setTodolists: (state, action: PayloadAction<{ todolists: Array<TodolistType> }>) => {        //     return action.payload.todolists.map((tl: any) => ({...tl, filter: 'all', entityStatus: 'idle'}))        // },        logOut: () => {            return [];        }    },    extraReducers: (builder) => {        builder            .addCase(fetchTodolists.fulfilled, (state, action) => {                return action.payload.todolists.map((tl: any) => ({...tl, filter: 'all', entityStatus: 'idle'}))            })            .addCase(removeTodolist.fulfilled, (state, action) => {                const index = state.findIndex(el => el.id == action.payload.id)                if (index !== -1) state.splice(index, 1)            })            .addCase(addTodolist.fulfilled, (state, action) => {                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})            })            .addCase(changeTodolistTitle.fulfilled, (state, action) => {                const index = state.findIndex(el => el.id == action.payload.id)                if (index !== -1) state[index].title = action.payload.title            })    }})// thunksexport const fetchTodolists = createAppAsyncThunk<{    todolists: TodolistType[]}, void>(`${slice.name}/fetchTodolist`, async (arg, thunkAPI) => {    const {dispatch, rejectWithValue} = thunkAPI    return thunkTryCatch(thunkAPI, async () => {        const res = await todolistsAPI.getTodolists()        dispatch(appAction.setAppStatus({status: 'succeeded'}))        return {todolists: res.data}    })})export const removeTodolist = createAppAsyncThunk<{ id: string }, { todolistId: string }>(`${slice.name}/removeTodolist`, async (arg, thunkAPI) => {    const {dispatch, rejectWithValue} = thunkAPI    return thunkTryCatch(thunkAPI, async () => {        dispatch(todolistsActions.setEntityStatus({id: arg.todolistId, entityStatus: "loading"}))        const res = await todolistsAPI.deleteTodolist(arg.todolistId)        if (res.data.resultCode === RESULT_CODE.SUCCEDED) {            dispatch(appAction.setAppStatus({status: 'succeeded'}))            dispatch(todolistsActions.setEntityStatus({id: arg.todolistId, entityStatus: "idle"}))            return {id: arg.todolistId}        } else {            handleServerAppError(dispatch, res.data)            return rejectWithValue(null)        }    })})export const addTodolist = createAppAsyncThunk<any, string>(`${slice.name}/addTodolist`, async (arg, thunkAPI) => {    const {dispatch, rejectWithValue} = thunkAPI    return thunkTryCatch(thunkAPI, async () => {        const res = await todolistsAPI.createTodolist(arg)        if (res.data.resultCode === RESULT_CODE.SUCCEDED) {            dispatch(appAction.setAppStatus({status: 'succeeded'}))            return {todolist: res.data.data.item}        } else {            handleServerAppError(dispatch, res.data)            return rejectWithValue(null)        }    })})export const changeTodolistTitle = createAppAsyncThunk<any, { id: string, title: string }>(`${slice.name}/changeTodolistTitle`, async (arg, thunkAPI) => {    const {dispatch, rejectWithValue} = thunkAPI    dispatch(appAction.setAppStatus({status: 'loading'}))    return thunkTryCatch(thunkAPI, async () => {        const res = await todolistsAPI.updateTodolist(arg.id, arg.title)        if (res.data.resultCode === RESULT_CODE.SUCCEDED) {            dispatch(appAction.setAppStatus({status: 'succeeded'}))            return {id: arg.id, title: arg.title}        } else {            handleServerAppError(dispatch, res.data)            return rejectWithValue(null)        }    })})// typesexport type FilterValuesType = 'all' | 'active' | 'completed';export type TodolistDomainType = TodolistType & {    filter: FilterValuesType,    entityStatus: RequestStatusType}export const todolistsReducer = slice.reducerexport const todolistsActions = slice.actionsexport const todolistThunk = {fetchTodolists, removeTodolist, addTodolist, changeTodolistTitle}