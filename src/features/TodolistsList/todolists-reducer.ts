import {todolistsAPI, TodolistType} from '../../api/todolists-api'import {Dispatch} from 'redux'import {    RequestStatusType,    SetAppErrorActionType,    setAppStatusAC,    SetAppStatusActionType} from "../../app/app-reduce";import {ErrorType, RESULT_CODE} from "./tasks-reducer";import {handleServerAppError, handleServerError} from "../../utils/error-utils";import axios from "axios";const initialState: Array<TodolistDomainType> = []export const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {    switch (action.type) {        case 'REMOVE-TODOLIST':            return state.filter(tl => tl.id !== action.id)        case 'ADD-TODOLIST':            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]        case 'CHANGE-TODOLIST-TITLE':            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)        case 'CHANGE-TODOLIST-FILTER':            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)        case 'SET-TODOLISTS':            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))        case "SET-ENTITY-STATUS": {            return state.map(el => el.id === action.todolistId ? {...el, entityStatus: action.entityStatus} : el)        }        default:            return state    }}// actionsexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)export const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)export const changeTodolistTitleAC = (id: string, title: string) => ({    type: 'CHANGE-TODOLIST-TITLE',    id,    title} as const)export const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({    type: 'CHANGE-TODOLIST-FILTER',    id,    filter} as const)export const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)export const setEntityStatusAC = (todolistId: string, entityStatus: RequestStatusType) => ({    type: 'SET-ENTITY-STATUS',    todolistId,    entityStatus} as const)// thunksexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {    dispatch(setAppStatusAC("loading"))    todolistsAPI.getTodolists()        .then((res) => {            dispatch(setTodolistsAC(res.data))            dispatch(setAppStatusAC("succeeded"))        })}export const removeTodolistTC = (todolistId: string) => async (dispatch: Dispatch<ActionsType>) => {    dispatch(setAppStatusAC("loading"))    dispatch(setEntityStatusAC(todolistId, "loading"))    try {        const res = await todolistsAPI.deleteTodolist(todolistId)        if (res.data.resultCode === RESULT_CODE.SUCCEDED) {            dispatch(setAppStatusAC("succeeded"))            dispatch(setEntityStatusAC(todolistId, "idle"))            dispatch(removeTodolistAC(todolistId))        } else {            handleServerAppError(dispatch, res.data)        }    } catch (e) {        if (axios.isAxiosError<ErrorType>(e))            handleServerError(dispatch, e)    }}export const addTodolistTC = (title: string) => async (dispatch: Dispatch<ActionsType>) => {    dispatch(setAppStatusAC("loading"))    try {        const res = await todolistsAPI.createTodolist(title)        if (res.data.resultCode === RESULT_CODE.SUCCEDED) {            dispatch(setAppStatusAC("succeeded"))            dispatch(addTodolistAC(res.data.data.item))        } else {            handleServerAppError(dispatch, res.data)        }    } catch (e) {        if (axios.isAxiosError<ErrorType>(e)) {            handleServerError(dispatch, e)        }    }}export const changeTodolistTitleTC = (id: string, title: string) => async (dispatch: Dispatch<ActionsType>) => {        dispatch(setAppStatusAC("loading"))        try {            const res = await todolistsAPI.updateTodolist(id, title)            if (res.data.resultCode === RESULT_CODE.SUCCEDED) {                dispatch(changeTodolistTitleAC(id, title))                dispatch(setAppStatusAC("succeeded"))            } else {                handleServerAppError(dispatch, res.data)            }        } catch (e) {            if (axios.isAxiosError<ErrorType>(e)) {                handleServerError(dispatch, e)            }        }    }// typesexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;export type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;export type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;type ActionsType =    | RemoveTodolistActionType    | AddTodolistActionType    | ReturnType<typeof changeTodolistTitleAC>    | ReturnType<typeof changeTodolistFilterAC>    | ReturnType<typeof setEntityStatusAC>    | SetAppErrorActionType    | SetTodolistsActionType    | SetAppStatusActionTypeexport type FilterValuesType = 'all' | 'active' | 'completed';export type TodolistDomainType = TodolistType & {    filter: FilterValuesType,    entityStatus: RequestStatusType}